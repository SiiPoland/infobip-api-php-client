<?php
/**
 * SmsStatus
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Infobip
 * @author   Infobip Support
 * @link     https://www.infobip.com
 */

/**
 * Infobip Client API Libraries OpenAPI Specification
 *
 * OpenAPI specification containing public endpoints supported in client API libraries.
 *
 * Contact: support@infobip.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Infobip\Model\Numbers;

use \ArrayAccess;
use \Infobip\ObjectSerializer;
use Infobip\Model\ModelInterface;

/**
 * SmsStatus Class Doc Comment
 *
 * @category Class
 * @package  Infobip
 * @author   Infobip Support
 * @link     https://www.infobip.com
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class NumbersPrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'NumbersPrice';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'pricePerMonth' => 'float',
        'setupPrice' => 'float',
        'initialMonthPrice' => 'float',
        'currency' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'pricePerMonth' => null,
        'setupPrice' => null,
        'initialMonthPrice' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pricePerMonth' => 'pricePerMonth',
        'setupPrice' => 'setupPrice',
        'initialMonthPrice' => 'initialMonthPrice',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pricePerMonth' => 'setPricePerMonth',
        'setupPrice' => 'setSetupPrice',
        'initialMonthPrice' => 'setInitialMonthPrice',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pricePerMonth' => 'getPricePerMonth',
        'setupPrice' => 'getSetupPrice',
        'initialMonthPrice' => 'getInitialMonthPrice',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)

    {
        $this->container['pricePerMonth'] = $data['pricePerMonth'] ?? null;
        $this->container['setupPrice'] = $data['setupPrice'] ?? null;
        $this->container['initialMonthPrice'] = $data['initialMonthPrice'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;

    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }



'setupPrice' => 'getSetupPrice',
'initialMonthPrice' => 'getInitialMonthPrice',
'currency' => 'getCurrency'

    /**
     * Gets pricePerMonth
     *
     * @return string|null
     */
    public function getPricePerMonth()
    {
        return $this->container['pricePerMonth'];
    }

    /**
     * Sets pricePerMonth
     *
     * @param float|null $action
     *
     * @return self
     */
    public function setPricePerMonth($pricePerMonth)
    {
        $this->container['pricePerMonth'] = $pricePerMonth;
        return $this;
    }

    /**
     * Gets setupPrice
     *
     * @return float|null
     */
    public function getSetupPrice()
    {
        return $this->container['setupPrice'];
    }

    /**
     * Sets setupPrice
     *
     * @param float|null $setupPrice
     *
     * @return self
     */
    public function setSetupPrice($setupPrice)
    {
        $this->container['setupPrice'] = $setupPrice;

        return $this;
    }

    /**
     * Gets initialMonthPrice
     *
     * @return int|null
     */
    public function getInitialMonthPrice()
    {
        return $this->container['initialMonthPrice'];
    }

    /**
     * Sets initialMonthPrice
     *
     * @param int|null $initialMonthPrice
     *
     * @return self
     */
    public function setInitialMonthPrice($initialMonthPrice)
    {
        $this->container['initialMonthPrice'] = $initialMonthPrice;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $groupName Status group name.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['$currency'] = $currency;

        return $this;
    }


    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
